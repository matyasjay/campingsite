[{"title":"AttributesConfig","type":0,"sectionRef":"#","url":"/campingsite/api/AttributesConfig","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"AttributesConfig","url":"/campingsite/api/AttributesConfig#properties","content":" "},{"title":"DefaultAttributes​","type":1,"pageTitle":"AttributesConfig","url":"/campingsite/api/AttributesConfig#DefaultAttributes","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; AttributesConfig.DefaultAttributes: {string}   "},{"title":"Defaults​","type":1,"pageTitle":"AttributesConfig","url":"/campingsite/api/AttributesConfig#Defaults","content":"&lt;/&gt; AttributesConfig.Defaults: {[string]: boolean | number}   "},{"title":"Keys​","type":1,"pageTitle":"AttributesConfig","url":"/campingsite/api/AttributesConfig#Keys","content":"&lt;/&gt; AttributesConfig.Keys: {string}  "},{"title":"Animations","type":0,"sectionRef":"#","url":"/campingsite/api/Animations","content":"On this page Animations Main Script Configure animations and trigger event based on Player variable changes. info Export created animations as an .rbxm files into the ReplicatedStorage to make it available for other scripts for reference. You can create animations by placing the Animator Platform into the Workspace and use the rigs on the platform to develop the animation. Exported Animations The currently available game animations in .rbxm format. Their filenameshould be the same as the configured ID. Usage local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Animate = require(ReplicatedStorage.Toolkits:WaitForChild(&quot;Animate&quot;)) local Attributes = require(ReplicatedStorage.Variables:WaitForChild(&quot;Attributes&quot;)) local AttributesConfig = require(ReplicatedStorage:WaitForChild(&quot;AttributesConfig&quot;)) local event = Attributes.Get(AttributesConfig.Keys.MyAttribute) local animation = &quot;MyAnimationId&quot; Animate.LoadAnimationOnChange(event, animation) Animator Platform The Animator Platform is a floating Workspace element outside of the PlayArea that could be used to configure animations. The platform must contain at least one Rig to begin creating a new Animation.","keywords":""},{"title":"Attributes","type":0,"sectionRef":"#","url":"/campingsite/api/Attributes","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Attributes","url":"/campingsite/api/Attributes#functions","content":" "},{"title":"Get​","type":1,"pageTitle":"Attributes","url":"/campingsite/api/Attributes#Get","content":"&lt;/&gt; Attributes.Get(name: string) → Entry   "},{"title":"GetAll​","type":1,"pageTitle":"Attributes","url":"/campingsite/api/Attributes#GetAll","content":"&lt;/&gt; Attributes.GetAll() → {Entry}   "},{"title":"Set​","type":1,"pageTitle":"Attributes","url":"/campingsite/api/Attributes#Set","content":"&lt;/&gt; Attributes.Set(attributes: {Entry}) → ()   "},{"title":"Put​","type":1,"pageTitle":"Attributes","url":"/campingsite/api/Attributes#Put","content":"&lt;/&gt; Attributes.Put( name: string, value: boolean ) → ()  "},{"title":"GameGui","type":0,"sectionRef":"#","url":"/campingsite/api/GameGui","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"GameGui","url":"/campingsite/api/GameGui#functions","content":" "},{"title":"showGameFrame​","type":1,"pageTitle":"GameGui","url":"/campingsite/api/GameGui#showGameFrame","content":"&lt;/&gt; GameGui.showGameFrame() → ()   "},{"title":"showWelcomeSign​","type":1,"pageTitle":"GameGui","url":"/campingsite/api/GameGui#showWelcomeSign","content":"&lt;/&gt; GameGui.showWelcomeSign() → ()   "},{"title":"showPitNeeds​","type":1,"pageTitle":"GameGui","url":"/campingsite/api/GameGui#showPitNeeds","content":"&lt;/&gt; GameGui.showPitNeeds(message: string) → ()  "},{"title":"Animate","type":0,"sectionRef":"#","url":"/campingsite/api/Animate","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Animate","url":"/campingsite/api/Animate#functions","content":" "},{"title":"LoadAnimation​","type":1,"pageTitle":"Animate","url":"/campingsite/api/Animate#LoadAnimation","content":"&lt;/&gt; Animate.LoadAnimation( humanoid: Humanoid ,-- The Humanoid object to load the animation to animationId: string-- The Asset ID of the Animation to be loaded ) → boolean-- True when the Animation was properly loaded and played Loads the Animation referenced by its Asset ID to the provided Humanoid.  "},{"title":"GetAnimationId​","type":1,"pageTitle":"Animate","url":"/campingsite/api/Animate#GetAnimationId","content":"&lt;/&gt; Animate.GetAnimationId( animationName: string-- The local name of the requested Animation ) → string-- The Asset ID of the requested Animation Get the Asset ID of the given animation stored in the Shared storage.  "},{"title":"LoadAnimationOnChange​","type":1,"pageTitle":"Animate","url":"/campingsite/api/Animate#LoadAnimationOnChange","content":"&lt;/&gt; Animate.LoadAnimationOnChange( boolValue: BoolValue ,-- The BoolValue to connect to animationId: string-- The Asset ID of the Animation to be loaded ) → () Load the given Animation referenced by its Asset ID when the provided BoolValue has been changed. "},{"title":"Iterator","type":0,"sectionRef":"#","url":"/campingsite/api/Iterator","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Iterator","url":"/campingsite/api/Iterator#functions","content":" "},{"title":"WalkModels​","type":1,"pageTitle":"Iterator","url":"/campingsite/api/Iterator#WalkModels","content":"&lt;/&gt; Iterator.WalkModels( models: {Model },-- The table of Models to call the callback on callback: ( model: Model , index: number ) → ()-- The callback function to call on each element in Models ) → () Execute the callback function on each element of a Model table. "},{"title":"Lighting","type":0,"sectionRef":"#","url":"/campingsite/api/Lighting","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Lighting","url":"/campingsite/api/Lighting#properties","content":" "},{"title":"Ambient​","type":1,"pageTitle":"Lighting","url":"/campingsite/api/Lighting#Ambient","content":"&lt;/&gt; Lighting.Ambient: Color3    "},{"title":"Brightness​","type":1,"pageTitle":"Lighting","url":"/campingsite/api/Lighting#Brightness","content":"&lt;/&gt; Lighting.Brightness: number   "},{"title":"TimeOfDay​","type":1,"pageTitle":"Lighting","url":"/campingsite/api/Lighting#TimeOfDay","content":"&lt;/&gt; Lighting.TimeOfDay: string   "},{"title":"GlobalShadows​","type":1,"pageTitle":"Lighting","url":"/campingsite/api/Lighting#GlobalShadows","content":"&lt;/&gt; Lighting.GlobalShadows: boolean   "},{"title":"EnvironmentDiffuseScale​","type":1,"pageTitle":"Lighting","url":"/campingsite/api/Lighting#EnvironmentDiffuseScale","content":"&lt;/&gt; Lighting.EnvironmentDiffuseScale: number   "},{"title":"EnvironmentSpecularScale​","type":1,"pageTitle":"Lighting","url":"/campingsite/api/Lighting#EnvironmentSpecularScale","content":"&lt;/&gt; Lighting.EnvironmentSpecularScale: number   "},{"title":"ShadowSoftness​","type":1,"pageTitle":"Lighting","url":"/campingsite/api/Lighting#ShadowSoftness","content":"&lt;/&gt; Lighting.ShadowSoftness: number   "},{"title":"Outlines​","type":1,"pageTitle":"Lighting","url":"/campingsite/api/Lighting#Outlines","content":"&lt;/&gt; Lighting.Outlines: boolean  "},{"title":"Observer","type":0,"sectionRef":"#","url":"/campingsite/api/Observer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Observer","url":"/campingsite/api/Observer#functions","content":" "},{"title":"CheckRequirements​","type":1,"pageTitle":"Observer","url":"/campingsite/api/Observer#CheckRequirements","content":"&lt;/&gt; Observer.CheckRequirements( requirements: Requirements, message: Message ) → () "},{"title":"Types","type":1,"pageTitle":"Observer","url":"/campingsite/api/Observer##","content":""},{"title":"​","type":1,"pageTitle":"Observer","url":"/campingsite/api/Observer#Requirements","content":"type Requirements = {[string]: { current: number, required: number }}  "},{"title":"​","type":1,"pageTitle":"Observer","url":"/campingsite/api/Observer#Message","content":"type Message = { done: string, required: string }    "},{"title":"TryEnableObject​","type":1,"pageTitle":"Observer","url":"/campingsite/api/Observer#TryEnableObject","content":"&lt;/&gt; Observer.TryEnableObject(props: Props) → () "},{"title":"Types","type":1,"pageTitle":"Observer","url":"/campingsite/api/Observer##","content":""},{"title":"​","type":1,"pageTitle":"Observer","url":"/campingsite/api/Observer#Props","content":"interface Props { requirements: Requirements message: Message object: Instance delay?: number initialize?: (message: string) → () callback?: () → () }   "},{"title":"Statistics","type":0,"sectionRef":"#","url":"/campingsite/api/Statistics","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Statistics","url":"/campingsite/api/Statistics#functions","content":" "},{"title":"Get​","type":1,"pageTitle":"Statistics","url":"/campingsite/api/Statistics#Get","content":"&lt;/&gt; Statistics.Get(name: string) → Entry   "},{"title":"GetAll​","type":1,"pageTitle":"Statistics","url":"/campingsite/api/Statistics#GetAll","content":"&lt;/&gt; Statistics.GetAll() → {Entry}   "},{"title":"Set​","type":1,"pageTitle":"Statistics","url":"/campingsite/api/Statistics#Set","content":"&lt;/&gt; Statistics.Set(attributes: {Entry}) → ()   "},{"title":"Put​","type":1,"pageTitle":"Statistics","url":"/campingsite/api/Statistics#Put","content":"&lt;/&gt; Statistics.Put( name: string, value: number ) → ()  "},{"title":"StatisticsConfig","type":0,"sectionRef":"#","url":"/campingsite/api/StatisticsConfig","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"StatisticsConfig","url":"/campingsite/api/StatisticsConfig#properties","content":" "},{"title":"DefaultStatistics​","type":1,"pageTitle":"StatisticsConfig","url":"/campingsite/api/StatisticsConfig#DefaultStatistics","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; StatisticsConfig.DefaultStatistics: {string}   "},{"title":"Defaults​","type":1,"pageTitle":"StatisticsConfig","url":"/campingsite/api/StatisticsConfig#Defaults","content":"&lt;/&gt; StatisticsConfig.Defaults: {boolean}   "},{"title":"Keys​","type":1,"pageTitle":"StatisticsConfig","url":"/campingsite/api/StatisticsConfig#Keys","content":"&lt;/&gt; StatisticsConfig.Keys: {string}  "},{"title":"Remote","type":0,"sectionRef":"#","url":"/campingsite/api/Remote","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Remote","url":"/campingsite/api/Remote#properties","content":" "},{"title":"Enabled​","type":1,"pageTitle":"Remote","url":"/campingsite/api/Remote#Enabled","content":"This item is read only and cannot be modified. Read Only Configuration &lt;/&gt; Remote.Enabled: true   "},{"title":"Version​","type":1,"pageTitle":"Remote","url":"/campingsite/api/Remote#Version","content":"This item is read only and cannot be modified. Read Only Configuration &lt;/&gt; Remote.Version: 0.2.4  danger It is highly advised to bump the Remote Version after changing configuration data. Changing remote data structure may lead to data loss. Ensure the changes are not breaking and could be deployed safely or backup your existing data before the push! "},{"title":"Functions​","type":1,"pageTitle":"Remote","url":"/campingsite/api/Remote#functions","content":" "},{"title":"Initialize​","type":1,"pageTitle":"Remote","url":"/campingsite/api/Remote#Initialize","content":"&lt;/&gt; Remote.Initialize(player: Player ) → () Executed on the Players.PlayerAdded event to synchronise the Player Attributes with the default and remote variables. Updates the DataStore when game.OnClose event occurs. Usage src/Scripts/Main.server.luau local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Players = game:GetService(&quot;Players&quot;) local Remote = require(ReplicatedStorage:WaitForChild(&quot;Remote&quot;)) Players.PlayerAdded:Connect(Remote.Initialize) Prepare and check remote connection Enable HTTP connection in Roblox Studio Configure the default values in Attributes Config Statistics Config Test the remote availability by playing your game  "},{"title":"StatsGui","type":0,"sectionRef":"#","url":"/campingsite/api/StatsGui","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"StatsGui","url":"/campingsite/api/StatsGui#functions","content":" "},{"title":"showStatsFrame​","type":1,"pageTitle":"StatsGui","url":"/campingsite/api/StatsGui#showStatsFrame","content":"&lt;/&gt; StatsGui.showStatsFrame(player: Player ) → ()  "},{"title":"Persona","type":0,"sectionRef":"#","url":"/campingsite/api/Persona","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Persona","url":"/campingsite/api/Persona#functions","content":" "},{"title":"GetPlayers​","type":1,"pageTitle":"Persona","url":"/campingsite/api/Persona#GetPlayers","content":"&lt;/&gt; Persona.GetPlayers() → {Player }-- The table of online Player objects Get all Player objects that are currently in the game.  "},{"title":"GetCurrentPlayer​","type":1,"pageTitle":"Persona","url":"/campingsite/api/Persona#GetCurrentPlayer","content":"This item only works when running on the client. Client &lt;/&gt; Persona.GetCurrentPlayer() → Player -- The current Player object Get the current local Player object.  "},{"title":"GetCurrentCharacter​","type":1,"pageTitle":"Persona","url":"/campingsite/api/Persona#GetCurrentCharacter","content":"This item only works when running on the client. Client &lt;/&gt; Persona.GetCurrentCharacter() → Model -- The Player#Character model of the current Player Get the current local Player#Character object.  "},{"title":"GetCharacterFromPlayer​","type":1,"pageTitle":"Persona","url":"/campingsite/api/Persona#GetCharacterFromPlayer","content":"&lt;/&gt; Persona.GetCharacterFromPlayer( player: Player -- The Player to get the Player#Character from ) → Model -- The Player#Character model of the given Player Get the Player#Character object from a Player object.  "},{"title":"GetPlayerFromCharacter​","type":1,"pageTitle":"Persona","url":"/campingsite/api/Persona#GetPlayerFromCharacter","content":"&lt;/&gt; Persona.GetPlayerFromCharacter( character: Model -- The Player#Character to get the Player from ) → Player -- The Player object of the given Player#Character Get the Player object from a Player#Character object.  "},{"title":"GetCurrentHumanoid​","type":1,"pageTitle":"Persona","url":"/campingsite/api/Persona#GetCurrentHumanoid","content":"This item only works when running on the client. Client &lt;/&gt; Persona.GetCurrentHumanoid() → Humanoid -- The Humanoid object of the current Player Get the Humanoid object of the current Player.  "},{"title":"GetAttribute​","type":1,"pageTitle":"Persona","url":"/campingsite/api/Persona#GetAttribute","content":"This item only works when running on the client. Client &lt;/&gt; Persona.GetAttribute( attribute: string-- The name of the current Player's attribute ) → {ValueBase }-- The ValueBase table of the current Player Get a specific attribute of the current Player.  "},{"title":"GetPlayerAttribute​","type":1,"pageTitle":"Persona","url":"/campingsite/api/Persona#GetPlayerAttribute","content":"&lt;/&gt; Persona.GetPlayerAttribute( attribute: string,-- The name of the requested attribute player: Player -- The Player object to get the attribute from ) → {ValueBase }-- The ValueBase table of the current Player Get a specific attribute of the given Player object. "},{"title":"Utils","type":0,"sectionRef":"#","url":"/campingsite/api/Utils","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Utils","url":"/campingsite/api/Utils#types","content":" "},{"title":"StoreParams​","type":1,"pageTitle":"Utils","url":"/campingsite/api/Utils#StoreParams","content":"&lt;/&gt; type StoreParams = {[string]: boolean | number}  "},{"title":"Functions​","type":1,"pageTitle":"Utils","url":"/campingsite/api/Utils#functions","content":" "},{"title":"GetKeysFromStore​","type":1,"pageTitle":"Utils","url":"/campingsite/api/Utils#GetKeysFromStore","content":"&lt;/&gt; Utils.GetKeysFromStore(store: StoreParams) → StoreParams   "},{"title":"GetDefaultsFromStore​","type":1,"pageTitle":"Utils","url":"/campingsite/api/Utils#GetDefaultsFromStore","content":"&lt;/&gt; Utils.GetDefaultsFromStore(store: StoreParams) → StoreParams  "},{"title":"Environment Items","type":0,"sectionRef":"#","url":"/campingsite/docs/environment-items","content":"Environment Items","keywords":""},{"title":"Trigger","type":0,"sectionRef":"#","url":"/campingsite/api/Trigger","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Trigger","url":"/campingsite/api/Trigger#functions","content":" "},{"title":"RunOnTouched​","type":1,"pageTitle":"Trigger","url":"/campingsite/api/Trigger#RunOnTouched","content":"&lt;/&gt; Trigger.RunOnTouched( trigger: Part ,-- The Part that needs to be touched in order to run the callback callback: (player: Player ) → ()-- The functionality to run when the trigger happens ) → () Executes the provided callback function when the trigger Part was touched by a Player. This method sets the Script.Parent to the Part provided in the first argument. "},{"title":"Code Conventions","type":0,"sectionRef":"#","url":"/campingsite/docs/conventions","content":"Code Conventions","keywords":""},{"title":"Architecture Overview","type":0,"sectionRef":"#","url":"/campingsite/docs/architecture","content":"","keywords":""},{"title":"Definitions​","type":1,"pageTitle":"Architecture Overview","url":"/campingsite/docs/architecture#definitions","content":""},{"title":"Data Model​","type":1,"pageTitle":"Architecture Overview","url":"/campingsite/docs/architecture#data-model","content":"Every place is represented by a data model, a hierarchy of objects that describe everything about the place. The data model contains all objects that make up the 3D world, such as parts, terrain, lighting, and other environmental elements. It also contains objects that can control runtime behavior, such as scripts that modify properties, call methods and functions, and respond to events that enable dynamic behavior and interactivity. The Roblox engine uses the data model as a source of truth for a place's state, so it can simulate and render it on client devices. "},{"title":"Client-Server Runtime​","type":1,"pageTitle":"Architecture Overview","url":"/campingsite/docs/architecture#client-server-runtime","content":"Roblox experiences are multiplayer by default and run in a client-server model. The Roblox server is the ultimate authority for maintaining the experience's state, and is responsible for keeping all connected clients in sync with the server. "},{"title":"Objects​","type":1,"pageTitle":"Architecture Overview","url":"/campingsite/docs/architecture#objects","content":"You place and organize objects in the data model to describe a place in Roblox. Every object in Roblox inherits from the Instance class, which defines generic properties, methods, and events that are common to all objects. Objects also define their own characteristics depending on the functionality the object provides. "},{"title":"Server Storage​","type":1,"pageTitle":"Architecture Overview","url":"/campingsite/docs/architecture#server-storage","content":"Contains objects that are only meant for server use. You can use this container to store objects that you want to clone and parent to the workspace or other containers at runtime. For example, you can store large objects such as maps in this container until they are needed and move them into the workspace only when required This lets you decrease client network traffic on initial join. "},{"title":"Replicated Storage​","type":1,"pageTitle":"Architecture Overview","url":"/campingsite/docs/architecture#replicated-storage","content":"Contains objects that are available to both the server and connected clients. Any changes that occur on the client persist but won't be replicated to the server. The server can overwrite changes on the client to maintain consistency. In addition, you can use this container to replicate any objects that don't need to exist in the 3D world until needed for cloning and parenting to all incoming character models. "},{"title":"Starter Pack​","type":1,"pageTitle":"Architecture Overview","url":"/campingsite/docs/architecture#starter-pack","content":"Scripts that set up the player's inventory and generally contain Toolobjects but often contains local scripts as well. "},{"title":"Server Scripts​","type":1,"pageTitle":"Architecture Overview","url":"/campingsite/docs/architecture#server-scripts","content":"Contains script objects that are required by server scripts, and other scripting -related objects that are only meant for server use. If your scripts require other, non-scripting objects, you must place them in ServerStorage. Scripts in this container are never replicated to clients, which allows you to have secure, server-side logic. "},{"title":"Player Scripts​","type":1,"pageTitle":"Architecture Overview","url":"/campingsite/docs/architecture#player-scripts","content":"All objects you store in these containers are non-persistent across sessions and reset every time a client rejoins. You can put objects in these containers such as player GUIs, client-side scripts, and other objects that are only relevant to the client. "},{"title":"Character Scripts​","type":1,"pageTitle":"Architecture Overview","url":"/campingsite/docs/architecture#character-scripts","content":"Scripts that are copied to the client when they spawn. These scripts do not persist when the player respawns. "},{"title":"Structure​","type":1,"pageTitle":"Architecture Overview","url":"/campingsite/docs/architecture#structure","content":"Since Rojo is a filesystem based tool, the structure of the codebase and related assets are quite important. There were many iterations already to refine and get the optimal results. According to the current state, the root level directories and their roles are the following: build This directory holds the script to build the project files into a single instance(explained below) and the latest build output, the latest.rbxm file project The actual Rojo configuration is the result of merging all .project.jsonfiles in the project directory. The project files are split into multiple scopes like Meta, Scripts, Storage, Tools and so on. The reason is separation of concerns and to make configuration objects not too overwhelming. You can check out the example project configurationsto get an idea about the syntax and how to manage different aspects of the game at the project configuration level. src All the source code and exported models. The code written in luau and all scripts are inside the Scripts directory while exported .rbxm files are found inside Models for clarity. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/campingsite/docs/intro","content":"","keywords":""},{"title":"Welcome​","type":1,"pageTitle":"Getting Started","url":"/campingsite/docs/intro#welcome","content":"This project is a sandbox game designed to help users explore and learn Roblox development through a partially-managed Rojo setup. The documentation provides an overview of the game's main features and a high-level explanation of the implemented ideas. The documentation is divided into two main parts: This overview, which summarizes the key features, ideas, and solutions in the project.The API documentation, generated directly from the code, which covers technical details and usage instructions for developers. "},{"title":"Goals​","type":1,"pageTitle":"Getting Started","url":"/campingsite/docs/intro#goals","content":""},{"title":"Learning​","type":1,"pageTitle":"Getting Started","url":"/campingsite/docs/intro#learning","content":"The primary purpose of this project is to build skills for creating unique content and game mechanics in Roblox and Roblox Studio. To make learning more engaging and challenging, the project incorporates custom tools alongside the standard Roblox workflow, offering added flexibility and deepening knowledge. "},{"title":"Experience​","type":1,"pageTitle":"Getting Started","url":"/campingsite/docs/intro#experience","content":"This sandbox aims to deliver a cohesive and engaging experience, rather than a collection of isolated mechanics. Each development iteration introduces new features designed to increase player engagement and enhance the core gameplay. Detailed explanations of current gameplay features are provided in the following sections. "},{"title":"Development​","type":1,"pageTitle":"Getting Started","url":"/campingsite/docs/intro#development","content":"As this project focuses on technical exploration, the emphasis is on continuous development and enhancing the existing codebase. Before getting started, ensure you meet the following requirements listed below. "},{"title":"Prerequisites​","type":1,"pageTitle":"Getting Started","url":"/campingsite/docs/intro#prerequisites","content":"Roblox Studio Roblox Studio is an all-in-one IDE that lets you create experiences that run on Roblox. It's free to use and lets you reach millions of users using the Roblox app on console, desktop, and mobile devices. Git Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Rojo Rojo is a project management tool designed to get professional resources in the hands of Roblox developers. Rojo Plugin Once you've installed the Rojo server, you can use it to install or upgrade the Rojo plugin which will sync changes to Roblox Studio. Luau Language Server Companion Companion plugin to the Luau Language Server (Luau LSP). This plugin allows the instance tree to be inferred from Studio, to provide better language features. Node.js - (optional to work on the documentation) Node.js® is a free, open-source, cross-platform JavaScript runtime environment that lets developers create servers, web apps, command line tools and scripts. Moonwave - (optional to work on the documentation) Moonwave is three things: a plugin for Docusaurus, a command line tool, and a parser, which generates JSON from your doc comments, which can also be consumed by many different tools. "},{"title":"Rojo Server​","type":1,"pageTitle":"Getting Started","url":"/campingsite/docs/intro#rojo-server","content":"Rojo is the core tool for this sandbox, enabling synchronization between the local codebase and a running Roblox Studio instance. Rojo manages scripts and replicated elements. After checking out the code from source control, open a terminal and run themake serve command. This will build the main project file (default.project.json) and start the server, which can then be connected to the Rojo plugin in Roblox Studio. Install and configure Rojo CLI For more detailed instructions please visit the official Rojo Websitewhere you can find all the details on how to setup your system to be able to use the Rojo services. "},{"title":"Sync Changes​","type":1,"pageTitle":"Getting Started","url":"/campingsite/docs/intro#sync-changes","content":"As you work on scripts, the service will automatically sync local changes. If any project files change, you’ll need to rebuild the project by stopping the current server and running make serve again. The process will fail if there are errors in any of the project configuration files. Once everything is set up and ready, you’re all set to start creating. Enjoy! "},{"title":"Tools & Equipment","type":0,"sectionRef":"#","url":"/campingsite/docs/tools-and-equipment","content":"","keywords":""},{"title":"Create​","type":1,"pageTitle":"Tools & Equipment","url":"/campingsite/docs/tools-and-equipment#create","content":""},{"title":"Configuration​","type":1,"pageTitle":"Tools & Equipment","url":"/campingsite/docs/tools-and-equipment#configuration","content":"In project/Tools.project.json add the following section: { &quot;StarterPack&quot;: { &quot;$className&quot;: &quot;StarterPack&quot;, &quot;$path&quot;: &quot;src/Models/Player/StarterPack&quot;, &quot;MyTool&quot;: { &quot;$path&quot;: &quot;src/Models/Tools/MyTool.rbxm&quot;, &quot;Script&quot;: { &quot;$path&quot;: &quot;src/Scripts/Tools/MyTool.server.luau&quot; } } } }  "},{"title":"Script​","type":1,"pageTitle":"Tools & Equipment","url":"/campingsite/docs/tools-and-equipment#script","content":"Create your Tool in src/Scripts/Tools/MyTool.server.luau for example: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local AttributesConfig = require(ReplicatedStorage:WaitForChild(&quot;Attributes&quot;)) local AttributesVariable = require(ReplicatedStorage.Variables:WaitForChild(&quot;Attributes&quot;)) local myTool = script.Parent local function onEquip() AttributesVariable.Put(AttributesConfig.Keys.HasAxe, true) end local function onUnequip() AttributesVariable.Put(AttributesConfig.Keys.HasAxe, false) end myTool.Equipped:Connect(onEquip) myTool.Unequipped:Connect(onUnequip) -- myTool.Activated:Connect(onActivate) -- myTool.Deactivated:Connect(onDeactivate)  "},{"title":"Statistics & Remote Data","type":0,"sectionRef":"#","url":"/campingsite/docs/statistics-and-remote","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"Statistics & Remote Data","url":"/campingsite/docs/statistics-and-remote#usage","content":"Setup the default &quot;leaderstats&quot; [Instance] in the Main script. The name has to be &quot;leaderstats&quot; since this is a built-in feature "},{"title":"Configuration​","type":1,"pageTitle":"Statistics & Remote Data","url":"/campingsite/docs/statistics-and-remote#configuration","content":"Configure the base stats in src/Main.server.luau as:  local leaderstats = Instance.new(&quot;Folder&quot;, player) leaderstats.Name = &quot;leaderstats&quot; local playerGold = Instance.new(&quot;NumberValue&quot;, leaderstats) playerGold.Name = &quot;Gold&quot; playerGold.Value = 0 while task.wait(1) do playerGold.Value += 10 end  "},{"title":"Update the stats​","type":1,"pageTitle":"Statistics & Remote Data","url":"/campingsite/docs/statistics-and-remote#update-the-stats","content":"You can change a stat as needed, here's an example that increases the amount of gold when the player touches myItem In src/Scripts/Items/MyItem.server.luau you can have something similar: local debounce = true myItem.Touched:Connect(function(hit) local character = hit.Parent local humanoid = char:FindFirstChild(&quot;Humanoid&quot;) local plr = game.Players:FindFirstChild(character.Name) if humanoid and debounce then debounce = false local pStats = plr:WaitForChild(&quot;leaderstats&quot;) local pGold = pStats.Gold pGold.Value += 10 task.wait(1) debounce = true end)  "}]